/*
  ESP32 publish telemetry data to VOne Cloud (Infrared sensor)
*/

#include "VOneMqttClient.h"
#define LED_PIN 48

//define device id
const char* InfraredSensor = "756b1939-44ad-4872-8b2a-12dbd45bd9ff";  //Replace with the deviceID of YOUR infrared sensor

//Used Pins
const int InfraredPin = 7;    //Left side Maker Port
int count = 0;
//input sensor

//Create an instance of VOneMqttClient
VOneMqttClient voneClient;

//last message time
unsigned long lastMsgTime = 0;

void setAlarm() {
  // Assuming only one note in the melody array
  int total = 5000; // Total duration of the alarm (in milliseconds)

  // Loop for generating the alarm tone
  for (int i = 0; i < total / 100; i++) {
    // Assuming you have a frequency value defined somewhere for the alarm tone
    // tone() function parameters: (pin, frequency, duration)
    tone(12, (i % 2 == 0) ? 2000 : 1000, 500); // Adjusted duration based on loop iteration

    // Delay for the tone (on)
    delay(i * 10);

    // Toggle the LED
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));

    // Delay for LED toggling (off)
    delay(50);
  }

  // After the alarm, turn off the tone and LED
  noTone(12); // Stop the tone
  digitalWrite(LED_PIN, LOW); // Turn off LED
}


void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WIFI_SSID);

  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void setup() {

  setup_wifi();
  voneClient.setup();

  //sensor
  pinMode(InfraredPin, INPUT_PULLUP);
}

void loop() {

  if (!voneClient.connected()) {
    voneClient.reconnect();
    voneClient.publishDeviceStatusEvent(InfraredSensor, true);
  }
  voneClient.loop();

  unsigned long cur = millis();
  if (cur - lastMsgTime > INTERVAL) {
    lastMsgTime = cur;

    //Publish telemetry data
    int InfraredVal = !digitalRead(InfraredPin);
    voneClient.publishTelemetryData(InfraredSensor, "Obstacle", InfraredVal);
    if (InfraredVal == LOW) { // Assuming HIGH means motion detected
    count ++;
    if (count == 3) 
    {
    setAlarm();
    }
  }

  }
}
